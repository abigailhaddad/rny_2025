---
title: "Processing Document Collections with LLMs: A Practical Workflow"
author: "Abigail Haddad"
format:
  revealjs:
    theme: [default, custom.scss]
    slide-number: true
    preview-links: auto
    transition: slide
    transition-speed: fast
    html-math-method: katex
    include-in-header: 
      - text: |
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
---

# Part 1: A Deadline {.section-header}

## 35,000 Public Comments to Analyze

![](images/hourglass.png){fig-align="left" width="200"}

**Deadline: [SOON]{.highlight}**


---

## My Usual Blocks

![](images/my usual blocks.png){fig-align="center" width="600"}


---

## The Weird Stuff

::: {.columns}
::: {.column width="50%"}
::: {style="margin-top: 20%"}
**Dark scanned PDFs**

**Random meme attachments** 

**Blurry photos of handwritten notes**
:::
:::

::: {.column width="50%"}
![](images/meme.webp){fig-align="center"}
:::
:::


---

## I Added a New Block

![](images/ocr.png){fig-align="center" width="700"}


---

## I Occasionally Got Gibberish

![](images/is this text.png){fig-align="center" width="800"}


---

## So I Built a Gibberish Detector

![](images/gibberish detector blocks.png){fig-align="center" width="700"}


---

## Now I'm Debugging My Gibberish Detector

![](images/debugging.png){fig-align="center" width="700"}


---

## Finally, I Try Gemini To Extract Text...

```python
if extraction_fails(doc):
    result = gemini.process(doc)
```


---

## 

::: {style="text-align: center; font-size: 5em; margin-top: 20%; color: #f59e0b; font-weight: 800"}
It Works!! 🎉🎊🥳
:::


---

## Gemini Cost Me

![](images/seven cents.png){fig-align="center" width="600"}


---

## The Result

✅ **35,000 comments processed**

🚀 **Website live in days**

⏰ **Avoided: months of manual work**

**Two blocks deleted:** [~~OCR~~]{style="color: red; text-decoration: line-through"}    [~~Gibberish Detector~~]{style="color: red; text-decoration: line-through"}


---

## Here It Is

![](images/comment_site.jpg){fig-align="center" width="800"}


# Part 2: A Step Back: The Text Data Pipeline {.section-header}

## Every Organization Has These

🏥 Stacks of medical records

👤 Piles of resumes

💬 Endless customer complaints

⚠️ Streams of error logs

📄 Mountains of contracts


---

## Not RAG: Same Questions Each Time

**"Is this fraudulent?"**

**"Should we interview them?"**

**"What's the main complaint?"**

**"What caused the error?"**

**"What's the risk?"**

::: {.fragment style="margin-top: 2em"}
***Time Is The Barrier To Answering These***
:::


---

## The Answer? Document Processing Pipeline

![](images/pipeline.png){fig-align="center" width="700"}



---

## The Three Steps

::: {.columns}
::: {.column width="40%"}
**GET**: Pull text from PDFs, Word docs, APIs, or user input

**PROCESS**: Use LLMs, regex, BERT, or other tools to extract meaning

**DO**: Create visualizations, populate templates, or trigger actions
:::

::: {.column width="60%"}
![](images/get process do blocks.png){fig-align="center"}
:::
:::


# Part 3: How to Get Started {.section-header}

## What Are You Trying to Do?

::: {.columns}
::: {.column width="50%"}
**What documents?**

- Clean PDFs with structured text?
- Scanned images of varying quality?
- Mix of formats and attachments?
- Handwritten notes or forms?
:::

::: {.column width="50%"}
**What's your goal?**

- Extract specific fields?
- Classify or categorize?
- Summarize content?
- Find patterns across documents?
:::
:::

---

## Don't Forget Your Constraints

::: {.incremental}
- **Privacy**: Can data leave your servers?
- **Budget**: What can you spend on API calls?
- **Time**: One-off analysis or ongoing pipeline?
- **Explainability**: Need to show your work?
- **Reliability**: How much drift can you tolerate?
:::

---

## Your Equation

::: {style="text-align: center; margin-top: 20%"}
**Your documents**  
+  
**Your goals**  
+  
**Your constraints**  
=  
[**Your solution**]{.emphasis style="font-size: 1.5em"}
:::

---

## Should I Throw It Into an LLM?

::: {.fragment style="font-size: 4em; color: #f59e0b; text-align: center; margin-top: 25%"}
**MAYBE!!!**
:::


---

## Four Factors to Consider

::: {.columns}
::: {.column width="50%"}
**🎯 Accuracy**  
How good is good enough?  
How does it fail?

**🔍 Transparency**  
Need deterministic output?  
Must explain decisions?
:::

::: {.column width="50%"}
**💰 Compute/Budget/Privacy**  
Can data leave your servers?  
API costs acceptable?

**⏰ One-Time vs. Ongoing**  
Single batch or production?  
Who monitors failures?
:::
:::


---

## When to Use What

| **📏 Rule-based** | **🤖 Smaller Models** | **🧠 LLMs** |
|---|---|---|
| • Regex<br>• Decision trees<br>• Keywords | • BERT<br>• spaCy<br>• Custom classifiers | • GPT-4<br>• Claude<br>• Gemini |
| **Perfect when:**<br>✓ Need explainability<br>✓ Patterns are simple | **Perfect when:**<br>✓ Must run locally<br>✓ Single-purpose tool<br>✓ Don't need perfect legibility | **Perfect when:**<br>✓ Complex reasoning<br>✓ Have budget/security<br>✓ Flexibility worth opacity, costs, monitoring |

::: {.fragment style="margin-top: 1.5em; text-align: center"}
[**Mix and match based on your four factors**]{.highlight}
:::


---

## Remember My Seven Cents?

**Gemini only worked because:**

::: {.incremental}
- ✓ Data could leave my environment
- ✓ 35,000 documents, most with no attachments = small enough for the budget
:::

::: {.fragment style="margin-top: 2em"}
[**Different constraints = Different solution**]{.emphasis}
:::


# Part 4: Real World Lessons {.section-header}

## You Can't Build All The Blocks

![](images/too many blocks.png){fig-align="center" width="700"}

Each use case needs [different blocks]{.emphasis}

What works for one project [won't work for the next]{.emphasis}


---

## My Specific Lessons

### As we scale up:

✓ Handle failures gracefully

✓ Parallelize operations  

✓ Track state properly

✓ Use real databases


---

## When Working With Others

::: {.columns}
::: {.column width="50%"}
### Schemas become contracts:

📋 Schemas become [contracts]{.emphasis}

🔒 Field names and formats [can't just change]{.emphasis}

✅ Validation is [essential]{.emphasis}
:::

::: {.column width="50%"}
![](images/schema.png){fig-align="center"}
:::
:::

---

## Enforce Structured Output

**Don't ask nicely. Enforce it.**

::: {.columns}
::: {.column width="50%"}
❌ **Don't do this:**
```python
"Please only respond with 
'support' or 'oppose'"

# Hope it listens...
```
:::

::: {.column width="50%"}
✅ **Do this:**
```python
class Response:
  stance: Literal[
    "support", 
    "oppose"
  ]
# Enforced structure
```
:::
:::

::: {.fragment style="margin-top: 2em"}
[**The LLM can only choose from your options**]{.emphasis}
:::

---

# Part 5: Evaluation {.section-header}

## Evaluate Your Pipeline Systematically

::: {.columns}
::: {.column width="50%"}
**📝 Build test sets:**

- Real examples from your data
- The weird edge cases  
- What failed before
:::

::: {.column width="50%"}
**🎯 Test what matters:**

- Accuracy on YOUR data
- How it fails (not just how often)
- [What keeps me up at night?]{.highlight}
:::
:::


---

## Make Iteration Painless

::: {.columns}
::: {.column width="50%"}
Build modularity into your processing layer:

- Swap models without changing code
- Test multiple prompts in parallel
- Compare results side-by-side
- Grid search across configurations

[**Modular design enables rapid experimentation**]{.highlight}
:::

::: {.column width="50%"}
![](images/make iteration painless.png){fig-align="center"}
:::
:::

---

## Don't Forget Monitoring

**For production systems, you need a fourth step:**

::: {.incremental}
- **Natural labeling**: When you have ground truth later
- **Strategic sampling**: Human review of edge cases
- **Performance tracking**: Know when models drift
- **Failure alerts**: Catch problems early
:::

::: {.fragment style="margin-top: 2em"}
[**Production pipelines need ongoing care**]{.highlight}
:::

---

# Part 6: Conclusion {.section-header}

## Start Simple

![](images/get process do blocks.png){fig-align="center" width="600"}

**Build only the blocks you need**

---

---

## My Next Challenge

New comments. Different sources.

::: {.fragment style="margin-top: 2em"}
**I generalized out my tools.**

[Hours, not months.]{.highlight}
:::


---

## Questions?

::: {style="font-size: 1.2em; line-height: 2.5"}
🔗 [github.com/abigailhaddad](https://github.com/abigailhaddad)

📝 [presentofcoding.substack.com](https://presentofcoding.substack.com)
:::

